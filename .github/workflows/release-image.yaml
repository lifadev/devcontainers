name: Release image

on:
  workflow_call:
    inputs:
      image: { type: string, required: true }

jobs:
  setup:
    name: Setup

    permissions:
      contents: read

    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with: { fetch-depth: 0 }

      - name: Load config
        id: config
        env:
          IMAGE: ${{ inputs.image }}
        run: |
          python3 <<EOF >> $GITHUB_OUTPUT

          import json
          from os import environ as env
          from pathlib import Path

          image = Path("images") / "src" / env["IMAGE"]
          config = json.loads((image / ".devcontainer" / "devcontainer.json").read_text())
          manifest = config["customizations"]["manifest"]
          name, version = manifest["name"], manifest["version"]

          print(f"version={version}")
          EOF

    outputs:
      version: ${{ steps.config.outputs.version }}

  check:
    name: Check
    needs: setup

    permissions:
      packages: read

    runs-on: ubuntu-24.04

    steps:
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check remote version
        id: check
        env:
          REGISTRY: ${{ vars.CONTAINER_REGISTRY }}
          NAMESPACE: ${{ vars.CONTAINER_NAMESPACE_IMAGE }}
          IMAGE: ${{ inputs.image }}
          VERSION: ${{ needs.setup.outputs.version }}
        run: |
          SKIP=$(docker manifest inspect \
            "$REGISTRY/$NAMESPACE/$IMAGE:$VERSION" \
            >/dev/null 2>&1 && echo 1 || echo 0)
          echo "skip=$SKIP" >>$GITHUB_OUTPUT

    outputs:
      skip: ${{ steps.check.outputs.skip }}

  build:
    name: Build
    needs:
      - setup
      - check
    if: needs.check.outputs.skip == '0'

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        os:
          - { name: ubuntu-24.04, arch: amd64 }
          - { name: ubuntu-24.04-arm, arch: arm64 }

    runs-on: ${{ matrix.os.name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with: { fetch-depth: 0 }

      - name: Install requirements
        run: |
          sudo apt-get update
          sudo apt-get -y install skopeo

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build image
        env:
          REGISTRY: ${{ vars.CONTAINER_REGISTRY }}
          NAMESPACE: ${{ vars.CONTAINER_NAMESPACE_IMAGE }}
          IMAGE: ${{ inputs.image }}
          VERSION: ${{ needs.setup.outputs.version }}
          ARCH: ${{ matrix.os.arch }}
        run: |
          MAJOR="${VERSION%.*.*}"
          MINOR="${VERSION%.*}"

          npx -y @devcontainers/cli build \
            --experimental-lockfile \
            --workspace-folder ./images/src/$IMAGE \
            --image-name "$REGISTRY/$NAMESPACE/$IMAGE:$VERSION-$ARCH" \
            --cache-from "$REGISTRY/$NAMESPACE/$IMAGE:latest" \
            --cache-from "$REGISTRY/$NAMESPACE/$IMAGE:$MAJOR" \
            --cache-from "$REGISTRY/$NAMESPACE/$IMAGE:$MINOR" \
            --push

  release:
    name: Release
    needs:
      - setup
      - build

    permissions:
      packages: write

    runs-on: ubuntu-24.04

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create multi-arch manifest
        env:
          REGISTRY: ${{ vars.CONTAINER_REGISTRY }}
          NAMESPACE: ${{ vars.CONTAINER_NAMESPACE_IMAGE }}
          IMAGE: ${{ inputs.image }}
          VERSION: ${{ needs.setup.outputs.version }}
        run: |
          MAJOR="${VERSION%.*.*}"
          MINOR="${VERSION%.*}"

          docker buildx imagetools create \
            --tag "$REGISTRY/$NAMESPACE/$IMAGE:latest" \
            --tag "$REGISTRY/$NAMESPACE/$IMAGE:$MAJOR" \
            --tag "$REGISTRY/$NAMESPACE/$IMAGE:$MINOR" \
            --tag "$REGISTRY/$NAMESPACE/$IMAGE:$VERSION" \
            "$REGISTRY/$NAMESPACE/$IMAGE:$VERSION-amd64" \
            "$REGISTRY/$NAMESPACE/$IMAGE:$VERSION-arm64"
