name: Release image

on:
  workflow_dispatch:
    inputs:
      image:
        required: true
        type: choice
        options:
          - base
          - devcontainer
          - python313

jobs:
  config:
    name: Config
    if: startsWith(github.ref, 'refs/tags/v')

    permissions:
      contents: read

    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load config
        id: config
        run: |
          python3 <<EOF >> $GITHUB_OUTPUT

          import json
          from pathlib import Path

          target = "ghcr.io/lifadev/devcontainers/${{ inputs.image }}"
          image = Path("images") / "${{ inputs.image }}"
          config = json.loads((image / ".devcontainer" / "devcontainer.json").read_text())
          manifest = config["customizations"]["manifest"]
          name, version = manifest["name"], manifest["version"]
          tags = version.split(".")
          tags = [".".join(tags[0:i+1]) for i in range(len(tags))] + ["latest"]
          tags = " ".join([f"--tag {target}:{t}" for t in tags])

          print(f"target={target}")
          print(f"version={version}")
          print(f"tags={tags}")
          EOF

    outputs:
      target: ${{ steps.config.outputs.target }}
      version: ${{ steps.config.outputs.version }}
      tags: ${{ steps.config.outputs.tags }}

  remote:
    name: Remote
    needs: config

    permissions:
      packages: read

    runs-on: ubuntu-24.04

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Inspect remote version
        id: remote
        run: |
          SKIP=$(docker manifest inspect \
            ${{ needs.config.outputs.target }}:${{ needs.config.outputs.version }} \
            >/dev/null 2>&1 && echo 1 || echo 0)
          echo "skip=$SKIP" >>$GITHUB_OUTPUT

    outputs:
      skip: ${{ steps.remote.outputs.skip }}

  build:
    name: Build
    needs:
      - config
      - remote
    if: needs.remote.outputs.skip == '0'

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        os:
          - { name: ubuntu-24.04, arch: amd64 }
          - { name: ubuntu-24.04-arm, arch: arm64 }

    runs-on: ${{ matrix.os.name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install requirements
        run: |
          sudo apt-get update
          sudo apt-get -y install skopeo

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push image
        uses: devcontainers/ci@v0.3
        with:
          cacheFrom: ${{ needs.config.outputs.target }}
          imageName: ${{ needs.config.outputs.target }}
          imageTag: ${{ needs.config.outputs.version }}-${{ matrix.os.arch }}
          platform: linux/${{ matrix.os.arch }}
          push: always
          subFolder: ./images/${{ inputs.image }}

  release:
    name: Release
    needs:
      - config
      - build

    permissions:
      packages: write

    runs-on: ubuntu-24.04

    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create multi-arch manifest
        run: |
          docker buildx imagetools create \
            ${{ needs.config.outputs.tags }} \
            ${{ needs.config.outputs.target }}:${{ needs.config.outputs.version }}-amd64 \
            ${{ needs.config.outputs.target }}:${{ needs.config.outputs.version }}-arm64
